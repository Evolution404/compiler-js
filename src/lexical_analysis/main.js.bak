class TextLex {
    constructor(text) {
        // 保存程序代码
        this.text = text
        this.key = ['main', 'void', 'int', 'double', 'char', 'float', 'printf', 'class', 'scanf', 'else', 'if', 'return', 'char', 'public', 'static', 'true', 'false', 'private']
        this.result = []
    }
    // 启动词法分析
    run() {
        let i = 0
        while (i < this.text.length) {
            i = this.splitWord(i)
        }
    }
    // 从index开始对text进行分词操作
    splitWord(index) {
        let c = this.text[index]
        if (this.isBlank(c)) {
            return index + 1
        } else if (this.isLeter(c)) {
            return this.handleLeter(index)
        } else if (this.isNumber(c)) {
            return this.handleNumber(index)
        } else {
          return this.handleOther(index)
        }
    }

    // 校验单个字符是否是大小字母或者下划线
    isLeter(c) {
        let reg = /^[a-zA-Z_]$/
        return reg.test(c)
    }
    isNumber(c) {
        let reg = /^\d$/
        return reg.test(c)
    }
    // 校验一个分词出的单词是否是一个关键字
    isKey(w) {
        return this.key.indexOf(w) >= 0
    }

    isBlank(c) {
        let reg = /^\s$/
        return reg.test(c)
    }

    isDoubleDelimiter(c) {
        let list = ['[', ']', '(', ')']
    }

    handleChar(index){

    }
    handleLeter(index) {
        let rs = ''
        let c = this.text[index]
        while (this.isLeter(c) || this.isNumber(c)) {
            rs += c
            index++
            c = this.text[index]
        }

        if (rs.length === 1) {
            this.addResult(rs, '字符常数')
        } else if (this.isKey(rs)) {
            this.addResult(rs, '关键字')
        } else {
            this.addResult(rs, '普通标识符')
        }
        return index
    }
    handleNumber(index) {
        let str = this.text.substring(index, this.text.length)
        let reg = /\d+(\.\d+)?([Ee][+-]?\d+)?/
        let rs = str.match(reg)[0]
        if (rs) {
            this.addResult(rs, '数字')
            return index + rs.length
        }
    }

    addResult(word, describe) {
        this.result.push([word, describe, 0])
    }
    addErr(word, describe) {
        this.result.push([word, describe, 1])
    }
}

let a = new TextLex('int 100.e10int 10')
a.run()
console.log(a.result)
