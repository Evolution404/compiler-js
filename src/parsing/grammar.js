// 相同左部的文法写在一起, 保证一个左部只占一行
// 之间通过|(或)连接
// 注意写成增广文法
export default [
    '<S>-><开始>',
    '<开始>-><函数定义> <开始>|@',
    '<函数定义>-><修饰词闭包> <类型> <变量> ( <参数声明> ) { <函数块> }',
    '<修饰词闭包>-><修饰词> <修饰词闭包>|@', '<修饰词>->public|private|protected',
    '<类型>->int <取地址>|char <取地址>|boolean <取地址>|void <取地址>',
    '<取地址>-><星号> <取地址>|@',
    '<星号>->*',
    '<变量>-><标志符> <数组下标>',
    '<标志符>->id',
    '<数组下标>->[ <因式> ]|@',
    '<因式>->( <表达式> )|<变量>|<数字>',
    '<数字>->digit',
    '<表达式>-><因子> <项>',
    '<因子>-><因式> <因式递归>',
    '<因式递归>->* <因式> <因式递归>|/ <因式> <因式递归>|@',
    '<项>->+ <因子> <项>|- <因子> <项>|@',
    '<参数声明>-><声明> <声明闭包>|@',
    '<声明>-><修饰词闭包> <类型> <变量> <赋初值>|<修饰词闭包> <类型> <变量> ( <参数声明> )',
    '<赋初值>->= <右值>|@',
    '<右值>-><表达式>|{ <多个数据> }',
    '<多个数据>-><数字> <数字闭包>',
    '<数字闭包>->, <数字> <数字闭包>|@',
    '<声明闭包>->, <声明> <声明闭包>|@',
    '<函数块>-><声明语句闭包> <函数块闭包>',
    '<声明语句闭包>-><声明语句> <声明语句闭包>|@',
    '<声明语句>-><声明> ;',
    '<函数块闭包>-><赋值函数> <函数块闭包>|<for循环> <函数块闭包>|<while循环> <函数块闭包>|<条件语句> <函数块闭包>|<函数返回> <函数块闭包>|@',
    '<赋值函数>-><变量> <赋值或函数调用>',
    '<赋值或函数调用>->= <右值> ;|( <参数列表> ) ;',
    '<参数列表>-><参数> <参数闭包>',
    '<参数闭包>->, <参数> <参数闭包>|@',
    '<参数>-><标志符>|<数字>|<字符串>',
    '<字符串>->string',
    '<for循环>->for ( <赋值函数> <逻辑表达式> ; <后缀表达式> ) { <函数块> }',
    '<while循环>->while ( <逻辑表达式> ) { <函数块> }',
    '<逻辑表达式>-><表达式> <逻辑运算符> <表达式>',
    '<逻辑运算符>-><|>|==|!=',
    '<后缀表达式>-><变量> <后缀运算符>',
    '<后缀运算符>->++|--',
    '<条件语句>->if ( <逻辑表达式> ) { <函数块> } <否则语句>',
    '<否则语句>->else { <函数块> }|@',
    '<函数返回>->return <因式> ;'
]

//export default [
    //'<开始>-><函数定义>',
    //'<函数定义>-><修饰词> <类型>',
    //'<修饰词>->public|@',
    //'<类型>->int',
//]
//export default [
    //'<S>-><T>',
    //'<T>->a <B> d|@',
    //'<B>-><T> b|@',
//]
//export default [
    //'<M>-><S>',
    //'<S>-><B> <B>',
    //'<B>->a <B>|b',
//]

//export default [
    //'<S>-><E>',
    //'<E>->a <A> c <B> e',
    //'<A>->b|<A> b',
    //'<B>->d'
//]

//export default [ 
    //'<M>-><E>',
    //'<E>-><E> + <T>|<T>',
    //'<T>-><T> * <F>|<F>',
    //'<F>->( <E> )|digit'
//]

//export default [ 
    //'<M>-><E>',
    //'<E>-><T> <E1>',
    //'<E1>->+ <T> <E1>|@',
    //'<T>-><F> <T1>',
    //'<T1>->* <F> <T1>|@',
    //'<F>->( <E> )|id'
//]

//export default [ 
  //'<E>-><S>',
  //'<S>->0 <S> 0|1 <S> 1|0 1'
//]
